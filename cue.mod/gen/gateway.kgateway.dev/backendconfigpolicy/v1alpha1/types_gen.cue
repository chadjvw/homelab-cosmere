// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/kgateway-dev/kgateway/raw/refs/heads/main/install/helm/kgateway-crds/templates/gateway.kgateway.dev_backendconfigpolicies.yaml

package v1alpha1

import (
	"strings"
	"list"
)

#BackendConfigPolicy: {
	apiVersion: "gateway.kgateway.dev/v1alpha1"
	kind:       "BackendConfigPolicy"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #BackendConfigPolicySpec
}
#BackendConfigPolicySpec: {
	commonHttpProtocolOptions?: {
		idleTimeout?:              string
		maxHeadersCount?:          int
		maxRequestsPerConnection?: int
		maxStreamDuration?:        string
	}
	connectTimeout?: string
	healthCheck?: {
		grpc?: {
			authority?:   string
			serviceName?: string
		}
		healthyThreshold!: int32
		http?: {
			host?:   string
			method?: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "OPTIONS" | "TRACE" | "PATCH"
			path!:   string
		}
		interval!:           string
		timeout!:            string
		unhealthyThreshold!: int32
	}
	http1ProtocolOptions?: {
		enableTrailers?:                          bool
		overrideStreamErrorOnInvalidHttpMessage?: bool
		preserveHttp1HeaderCase?:                 bool
	}
	http2ProtocolOptions?: {
		initialConnectionWindowSize?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
		initialStreamWindowSize?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
		maxConcurrentStreams?:                    int
		overrideStreamErrorOnInvalidHttpMessage?: bool
	}
	loadBalancer?: {
		closeConnectionsOnHostSetChange?: bool
		healthyPanicThreshold?:           uint & <=100
		leastRequest?: {
			choiceCount?: int32
			slowStart?: {
				aggression?:       string
				minWeightPercent?: int32
				window?:           string
			}
		}
		localityType?: "WeightedLb"
		maglev?: {
			hashPolicies?: list.MaxItems(16) & [...{
				cookie?: {
					httpOnly?: bool
					name!:     strings.MinRunes(1)
					path?:     string
					sameSite?: "Strict" | "Lax" | "None"
					secure?:   bool
					ttl?:      string
				}
				header?: {
					name!: strings.MinRunes(1)
				}
				sourceIP?: {}
				terminal?: bool
			}] & [_, ...]
			useHostnameForHashing?: bool
		}
		random?: {}
		ringHash?: {
			hashPolicies?: list.MaxItems(16) & [...{
				cookie?: {
					httpOnly?: bool
					name!:     strings.MinRunes(1)
					path?:     string
					sameSite?: "Strict" | "Lax" | "None"
					secure?:   bool
					ttl?:      string
				}
				header?: {
					name!: strings.MinRunes(1)
				}
				sourceIP?: {}
				terminal?: bool
			}] & [_, ...]
			maximumRingSize?:       int64
			minimumRingSize?:       int64
			useHostnameForHashing?: bool
		}
		roundRobin?: {
			slowStart?: {
				aggression?:       string
				minWeightPercent?: int32
				window?:           string
			}
		}
		updateMergeWindow?: string
	}
	outlierDetection?: {
		baseEjectionTime?:   string
		consecutive5xx?:     int32
		interval?:           string
		maxEjectionPercent?: uint & <=100
	}
	perConnectionBufferLimitBytes?: int
	targetRefs?: list.MaxItems(16) & [...{
		group!: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
		kind!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}
		name!: strings.MaxRunes(253) & strings.MinRunes(1)
	}] & [_, ...]
	targetSelectors?: [...{
		group!: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
		kind!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}
		matchLabels!: {
			[string]: string
		}
	}]
	tcpKeepalive?: {
		keepAliveInterval?: string
		keepAliveProbes?:   int
		keepAliveTime?:     string
	}
	tls?: {
		allowRenegotiation?: bool
		alpnProtocols?: [...string]
		insecureSkipVerify?: bool
		parameters?: {
			cipherSuites?: [...string]
			ecdhCurves?: [...string]
			tlsMaxVersion?: "AUTO" | "1.0" | "1.1" | "1.2" | "1.3"
			tlsMinVersion?: "AUTO" | "1.0" | "1.1" | "1.2" | "1.3"
		}
		secretRef?: {
			name?: string
		}
		simpleTLS?: bool
		sni?:       strings.MinRunes(1)
		tlsFiles?: {
			rootCA?:         strings.MinRunes(1)
			tlsCertificate?: strings.MinRunes(1)
			tlsKey?:         strings.MinRunes(1)
		}
		verifySubjectAltName?: [...string]
		wellKnownCACertificates?: "System"
	}
}
