// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/kgateway-dev/kgateway/raw/refs/heads/main/install/helm/kgateway-crds/templates/gateway.kgateway.dev_backends.yaml

package v1alpha1

import (
	"strings"
	"struct"
	"list"
)

#Backend: {
	apiVersion: "gateway.kgateway.dev/v1alpha1"
	kind:       "Backend"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #BackendSpec
}
#BackendSpec: {
	ai?: struct.MinFields(1) & struct.MaxFields(1) & {
		llm?: {
			authHeaderOverride?: {
				headerName?: string
				prefix?:     string
			}
			hostOverride?: {
				host!: strings.MinRunes(1)
				port!: uint16 & >=1
			}
			pathOverride?: struct.MinFields(1) & {
				fullPath!: string
			}
			provider!: struct.MinFields(1) & struct.MaxFields(1) & {
				anthropic?: {
					apiVersion?: string
					authToken!: {
						inline?: string
						kind!:   "Inline" | "SecretRef" | "Passthrough"
						secretRef?: {
							name?: string
						}
					}
					model?: string
				}
				azureopenai?: {
					apiVersion!: strings.MinRunes(1)
					authToken!: {
						inline?: string
						kind!:   "Inline" | "SecretRef" | "Passthrough"
						secretRef?: {
							name?: string
						}
					}
					deploymentName!: strings.MinRunes(1)
					endpoint!:       strings.MinRunes(1)
				}
				bedrock?: {
					auth?: {
						secretRef?: {
							name?: string
						}
						type!: "Secret"
					}
					guardrail?: {
						identifier!: strings.MinRunes(1)
						version!:    strings.MinRunes(1)
					}
					model!: strings.MinRunes(1)
					region?: strings.MaxRunes(63) & strings.MinRunes(1) & {
						=~"^[a-z0-9-]+$"
					}
				}
				gemini?: {
					apiVersion!: string
					authToken!: {
						inline?: string
						kind!:   "Inline" | "SecretRef" | "Passthrough"
						secretRef?: {
							name?: string
						}
					}
					model!: string
				}
				openai?: {
					authToken!: {
						inline?: string
						kind!:   "Inline" | "SecretRef" | "Passthrough"
						secretRef?: {
							name?: string
						}
					}
					model?: string
				}
				vertexai?: {
					apiVersion!: strings.MinRunes(1)
					authToken!: {
						inline?: string
						kind!:   "Inline" | "SecretRef" | "Passthrough"
						secretRef?: {
							name?: string
						}
					}
					location!:  strings.MinRunes(1)
					model!:     strings.MinRunes(1)
					modelPath?: string
					projectId!: strings.MinRunes(1)
					publisher!: "GOOGLE"
				}
			}
		}
		multipool?: {
			priorities!: list.MaxItems(20) & [...{
				pool?: list.MaxItems(20) & [...{
					authHeaderOverride?: {
						headerName?: string
						prefix?:     string
					}
					hostOverride?: {
						host!: strings.MinRunes(1)
						port!: uint16 & >=1
					}
					pathOverride?: struct.MinFields(1) & {
						fullPath!: string
					}
					provider!: struct.MinFields(1) & struct.MaxFields(1) & {
						anthropic?: {
							apiVersion?: string
							authToken!: {
								inline?: string
								kind!:   "Inline" | "SecretRef" | "Passthrough"
								secretRef?: {
									name?: string
								}
							}
							model?: string
						}
						azureopenai?: {
							apiVersion!: strings.MinRunes(1)
							authToken!: {
								inline?: string
								kind!:   "Inline" | "SecretRef" | "Passthrough"
								secretRef?: {
									name?: string
								}
							}
							deploymentName!: strings.MinRunes(1)
							endpoint!:       strings.MinRunes(1)
						}
						bedrock?: {
							auth?: {
								secretRef?: {
									name?: string
								}
								type!: "Secret"
							}
							guardrail?: {
								identifier!: strings.MinRunes(1)
								version!:    strings.MinRunes(1)
							}
							model!: strings.MinRunes(1)
							region?: strings.MaxRunes(63) & strings.MinRunes(1) & {
								=~"^[a-z0-9-]+$"
							}
						}
						gemini?: {
							apiVersion!: string
							authToken!: {
								inline?: string
								kind!:   "Inline" | "SecretRef" | "Passthrough"
								secretRef?: {
									name?: string
								}
							}
							model!: string
						}
						openai?: {
							authToken!: {
								inline?: string
								kind!:   "Inline" | "SecretRef" | "Passthrough"
								secretRef?: {
									name?: string
								}
							}
							model?: string
						}
						vertexai?: {
							apiVersion!: strings.MinRunes(1)
							authToken!: {
								inline?: string
								kind!:   "Inline" | "SecretRef" | "Passthrough"
								secretRef?: {
									name?: string
								}
							}
							location!:  strings.MinRunes(1)
							model!:     strings.MinRunes(1)
							modelPath?: string
							projectId!: strings.MinRunes(1)
							publisher!: "GOOGLE"
						}
					}
				}] & [_, ...]
			}] & [_, ...]
		}
	}
	aws?: {
		accountId!: strings.MaxRunes(12) & strings.MinRunes(1) & {
			=~"^[0-9]{12}$"
		}
		auth?: {
			secretRef?: {
				name?: string
			}
			type!: "Secret"
		}
		lambda!: {
			endpointURL?: strings.MaxRunes(2048) & {
				=~"^https?://[-a-zA-Z0-9@:%.+~#?&/=]+$"
			}
			functionName!:         =~"^[A-Za-z0-9-_]{1,140}$"
			invocationMode?:       "Sync" | "Async"
			payloadTransformMode?: "None" | "Envoy"
			qualifier?:            =~"^(\\$LATEST|[0-9]+|[A-Za-z0-9-_]{1,128})$"
		}
		region?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-z0-9-]+$"
		}
	}
	dynamicForwardProxy?: {
		enableTls?: bool
	}
	mcp?: {
		targets!: list.MaxItems(32) & [...{
			name!: string
			selector?: {
				namespace?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
				service?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
			}
			static?: {
				host!:     strings.MinRunes(1)
				path?:     string
				port!:     uint16 & >=1
				protocol?: "StreamableHTTP" | "SSE"
			}
		}] & [_, ...]
	}
	static?: {
		appProtocol?: "http2" | "grpc" | "grpc-web" | "kubernetes.io/h2c" | "kubernetes.io/ws"
		hosts!: [...{
			host!: strings.MinRunes(1)
			port!: uint16 & >=1
		}] & [_, ...]
	}
	type!: "AI" | "AWS" | "Static" | "DynamicForwardProxy" | "MCP"
}
