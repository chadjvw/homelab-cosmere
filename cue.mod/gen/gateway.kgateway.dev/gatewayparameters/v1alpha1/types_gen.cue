// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/kgateway-dev/kgateway/raw/refs/heads/main/install/helm/kgateway-crds/templates/gateway.kgateway.dev_gatewayparameters.yaml

package v1alpha1

import "strings"

#GatewayParameters: {
	apiVersion: "gateway.kgateway.dev/v1alpha1"
	kind:       "GatewayParameters"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #GatewayParametersSpec
}
#GatewayParametersSpec: {
	kube?: {
		agentGateway?: {
			customConfigMapName?: string
			enabled?:             bool
			env?: [...{
				name!:  string
				value?: string
				valueFrom?: {
					configMapKeyRef?: {
						key!:      string
						name?:     string
						optional?: bool
					}
					fieldRef?: {
						apiVersion?: string
						fieldPath!:  string
					}
					resourceFieldRef?: {
						containerName?: string
						divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
						resource!: string
					}
					secretKeyRef?: {
						key!:      string
						name?:     string
						optional?: bool
					}
				}
			}]
			image?: {
				digest?:     string
				pullPolicy?: string
				registry?:   string
				repository?: string
				tag?:        string
			}
			logLevel?: string
			resources?: {
				claims?: [...{
					name!:    string
					request?: string
				}]
				limits?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
				requests?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
			}
			securityContext?: {
				allowPrivilegeEscalation?: bool
				appArmorProfile?: {
					localhostProfile?: string
					type!:             string
				}
				capabilities?: {
					add?: [...string]
					drop?: [...string]
				}
				privileged?:             bool
				procMount?:              string
				readOnlyRootFilesystem?: bool
				runAsGroup?:             int64
				runAsNonRoot?:           bool
				runAsUser?:              int64
				seLinuxOptions?: {
					level?: string
					role?:  string
					type?:  string
					user?:  string
				}
				seccompProfile?: {
					localhostProfile?: string
					type!:             string
				}
				windowsOptions?: {
					gmsaCredentialSpec?:     string
					gmsaCredentialSpecName?: string
					hostProcess?:            bool
					runAsUserName?:          string
				}
			}
		}
		aiExtension?: {
			enabled?: bool
			env?: [...{
				name!:  string
				value?: string
				valueFrom?: {
					configMapKeyRef?: {
						key!:      string
						name?:     string
						optional?: bool
					}
					fieldRef?: {
						apiVersion?: string
						fieldPath!:  string
					}
					resourceFieldRef?: {
						containerName?: string
						divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
						resource!: string
					}
					secretKeyRef?: {
						key!:      string
						name?:     string
						optional?: bool
					}
				}
			}]
			image?: {
				digest?:     string
				pullPolicy?: string
				registry?:   string
				repository?: string
				tag?:        string
			}
			ports?: [...{
				containerPort!: int32
				hostIP?:        string
				hostPort?:      int32
				name?:          string
				protocol?:      string
			}]
			resources?: {
				claims?: [...{
					name!:    string
					request?: string
				}]
				limits?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
				requests?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
			}
			securityContext?: {
				allowPrivilegeEscalation?: bool
				appArmorProfile?: {
					localhostProfile?: string
					type!:             string
				}
				capabilities?: {
					add?: [...string]
					drop?: [...string]
				}
				privileged?:             bool
				procMount?:              string
				readOnlyRootFilesystem?: bool
				runAsGroup?:             int64
				runAsNonRoot?:           bool
				runAsUser?:              int64
				seLinuxOptions?: {
					level?: string
					role?:  string
					type?:  string
					user?:  string
				}
				seccompProfile?: {
					localhostProfile?: string
					type!:             string
				}
				windowsOptions?: {
					gmsaCredentialSpec?:     string
					gmsaCredentialSpecName?: string
					hostProcess?:            bool
					runAsUserName?:          string
				}
			}
			stats?: {
				customLabels?: [...{
					keyDelimiter?:      string
					metadataKey!:       strings.MinRunes(1)
					metadataNamespace?: "envoy.filters.http.jwt_authn" | "io.solo.transformation"
					name!:              strings.MinRunes(1)
				}]
			}
			tracing?: {
				endpoint!: strings.MaxRunes(253) & strings.MinRunes(1) & {
					=~"^(([^:/?#]+):)(//([^/?#]*))([^?#]*)(\\?([^#]*))?(#(.*))?"
				}
				protocol?: "grpc" | "http/protobuf" | "http/json"
				sampler?: {
					arg?:  =~"^0(\\.\\d+)?|1(\\.0+)?$"
					type?: "alwaysOn" | "alwaysOff" | "traceidratio" | "parentbasedAlwaysOn" | "parentbasedAlwaysOff" | "parentbasedTraceidratio"
				}
				timeout?: string
			}
		}
		deployment?: {
			omitReplicas?: bool
			replicas?:     int32
		}
		envoyContainer?: {
			bootstrap?: {
				componentLogLevels?: {
					[string]: string
				}
				logLevel?: string
			}
			env?: [...{
				name!:  string
				value?: string
				valueFrom?: {
					configMapKeyRef?: {
						key!:      string
						name?:     string
						optional?: bool
					}
					fieldRef?: {
						apiVersion?: string
						fieldPath!:  string
					}
					resourceFieldRef?: {
						containerName?: string
						divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
						resource!: string
					}
					secretKeyRef?: {
						key!:      string
						name?:     string
						optional?: bool
					}
				}
			}]
			image?: {
				digest?:     string
				pullPolicy?: string
				registry?:   string
				repository?: string
				tag?:        string
			}
			resources?: {
				claims?: [...{
					name!:    string
					request?: string
				}]
				limits?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
				requests?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
			}
			securityContext?: {
				allowPrivilegeEscalation?: bool
				appArmorProfile?: {
					localhostProfile?: string
					type!:             string
				}
				capabilities?: {
					add?: [...string]
					drop?: [...string]
				}
				privileged?:             bool
				procMount?:              string
				readOnlyRootFilesystem?: bool
				runAsGroup?:             int64
				runAsNonRoot?:           bool
				runAsUser?:              int64
				seLinuxOptions?: {
					level?: string
					role?:  string
					type?:  string
					user?:  string
				}
				seccompProfile?: {
					localhostProfile?: string
					type!:             string
				}
				windowsOptions?: {
					gmsaCredentialSpec?:     string
					gmsaCredentialSpecName?: string
					hostProcess?:            bool
					runAsUserName?:          string
				}
			}
		}
		floatingUserId?: bool
		istio?: {
			customSidecars?: [...{
				args?: [...string]
				command?: [...string]
				env?: [...{
					name!:  string
					value?: string
					valueFrom?: {
						configMapKeyRef?: {
							key!:      string
							name?:     string
							optional?: bool
						}
						fieldRef?: {
							apiVersion?: string
							fieldPath!:  string
						}
						resourceFieldRef?: {
							containerName?: string
							divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
							resource!: string
						}
						secretKeyRef?: {
							key!:      string
							name?:     string
							optional?: bool
						}
					}
				}]
				envFrom?: [...{
					configMapRef?: {
						name?:     string
						optional?: bool
					}
					prefix?: string
					secretRef?: {
						name?:     string
						optional?: bool
					}
				}]
				image?:           string
				imagePullPolicy?: string
				lifecycle?: {
					postStart?: {
						exec?: {
							command?: [...string]
						}
						httpGet?: {
							host?: string
							httpHeaders?: [...{
								name!:  string
								value!: string
							}]
							path?: string
							port!: matchN(>=1, [int, string])
							scheme?: string
						}
						sleep?: {
							seconds!: int64
						}
						tcpSocket?: {
							host?: string
							port!: matchN(>=1, [int, string])
						}
					}
					preStop?: {
						exec?: {
							command?: [...string]
						}
						httpGet?: {
							host?: string
							httpHeaders?: [...{
								name!:  string
								value!: string
							}]
							path?: string
							port!: matchN(>=1, [int, string])
							scheme?: string
						}
						sleep?: {
							seconds!: int64
						}
						tcpSocket?: {
							host?: string
							port!: matchN(>=1, [int, string])
						}
					}
					stopSignal?: string
				}
				livenessProbe?: {
					exec?: {
						command?: [...string]
					}
					failureThreshold?: int32
					grpc?: {
						port!:    int32
						service?: string
					}
					httpGet?: {
						host?: string
						httpHeaders?: [...{
							name!:  string
							value!: string
						}]
						path?: string
						port!: matchN(>=1, [int, string])
						scheme?: string
					}
					initialDelaySeconds?: int32
					periodSeconds?:       int32
					successThreshold?:    int32
					tcpSocket?: {
						host?: string
						port!: matchN(>=1, [int, string])
					}
					terminationGracePeriodSeconds?: int64
					timeoutSeconds?:                int32
				}
				name!: string
				ports?: [...{
					containerPort!: int32
					hostIP?:        string
					hostPort?:      int32
					name?:          string
					protocol?:      string
				}]
				readinessProbe?: {
					exec?: {
						command?: [...string]
					}
					failureThreshold?: int32
					grpc?: {
						port!:    int32
						service?: string
					}
					httpGet?: {
						host?: string
						httpHeaders?: [...{
							name!:  string
							value!: string
						}]
						path?: string
						port!: matchN(>=1, [int, string])
						scheme?: string
					}
					initialDelaySeconds?: int32
					periodSeconds?:       int32
					successThreshold?:    int32
					tcpSocket?: {
						host?: string
						port!: matchN(>=1, [int, string])
					}
					terminationGracePeriodSeconds?: int64
					timeoutSeconds?:                int32
				}
				resizePolicy?: [...{
					resourceName!:  string
					restartPolicy!: string
				}]
				resources?: {
					claims?: [...{
						name!:    string
						request?: string
					}]
					limits?: {
						[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					}
					requests?: {
						[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					}
				}
				restartPolicy?: string
				securityContext?: {
					allowPrivilegeEscalation?: bool
					appArmorProfile?: {
						localhostProfile?: string
						type!:             string
					}
					capabilities?: {
						add?: [...string]
						drop?: [...string]
					}
					privileged?:             bool
					procMount?:              string
					readOnlyRootFilesystem?: bool
					runAsGroup?:             int64
					runAsNonRoot?:           bool
					runAsUser?:              int64
					seLinuxOptions?: {
						level?: string
						role?:  string
						type?:  string
						user?:  string
					}
					seccompProfile?: {
						localhostProfile?: string
						type!:             string
					}
					windowsOptions?: {
						gmsaCredentialSpec?:     string
						gmsaCredentialSpecName?: string
						hostProcess?:            bool
						runAsUserName?:          string
					}
				}
				startupProbe?: {
					exec?: {
						command?: [...string]
					}
					failureThreshold?: int32
					grpc?: {
						port!:    int32
						service?: string
					}
					httpGet?: {
						host?: string
						httpHeaders?: [...{
							name!:  string
							value!: string
						}]
						path?: string
						port!: matchN(>=1, [int, string])
						scheme?: string
					}
					initialDelaySeconds?: int32
					periodSeconds?:       int32
					successThreshold?:    int32
					tcpSocket?: {
						host?: string
						port!: matchN(>=1, [int, string])
					}
					terminationGracePeriodSeconds?: int64
					timeoutSeconds?:                int32
				}
				stdin?:                    bool
				stdinOnce?:                bool
				terminationMessagePath?:   string
				terminationMessagePolicy?: string
				tty?:                      bool
				volumeDevices?: [...{
					devicePath!: string
					name!:       string
				}]
				volumeMounts?: [...{
					mountPath!:         string
					mountPropagation?:  string
					name!:              string
					readOnly?:          bool
					recursiveReadOnly?: string
					subPath?:           string
					subPathExpr?:       string
				}]
				workingDir?: string
			}]
			istioProxyContainer?: {
				image?: {
					digest?:     string
					pullPolicy?: string
					registry?:   string
					repository?: string
					tag?:        string
				}
				istioDiscoveryAddress?: string
				istioMetaClusterId?:    string
				istioMetaMeshId?:       string
				logLevel?:              string
				resources?: {
					claims?: [...{
						name!:    string
						request?: string
					}]
					limits?: {
						[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					}
					requests?: {
						[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					}
				}
				securityContext?: {
					allowPrivilegeEscalation?: bool
					appArmorProfile?: {
						localhostProfile?: string
						type!:             string
					}
					capabilities?: {
						add?: [...string]
						drop?: [...string]
					}
					privileged?:             bool
					procMount?:              string
					readOnlyRootFilesystem?: bool
					runAsGroup?:             int64
					runAsNonRoot?:           bool
					runAsUser?:              int64
					seLinuxOptions?: {
						level?: string
						role?:  string
						type?:  string
						user?:  string
					}
					seccompProfile?: {
						localhostProfile?: string
						type!:             string
					}
					windowsOptions?: {
						gmsaCredentialSpec?:     string
						gmsaCredentialSpecName?: string
						hostProcess?:            bool
						runAsUserName?:          string
					}
				}
			}
		}
		podTemplate?: {
			affinity?: {
				nodeAffinity?: {
					preferredDuringSchedulingIgnoredDuringExecution?: [...{
						preference!: {
							matchExpressions?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
							matchFields?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
						}
						weight!: int32
					}]
					requiredDuringSchedulingIgnoredDuringExecution?: {
						nodeSelectorTerms!: [...{
							matchExpressions?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
							matchFields?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
						}]
					}
				}
				podAffinity?: {
					preferredDuringSchedulingIgnoredDuringExecution?: [...{
						podAffinityTerm!: {
							labelSelector?: {
								matchExpressions?: [...{
									key!:      string
									operator!: string
									values?: [...string]
								}]
								matchLabels?: {
									[string]: string
								}
							}
							matchLabelKeys?: [...string]
							mismatchLabelKeys?: [...string]
							namespaceSelector?: {
								matchExpressions?: [...{
									key!:      string
									operator!: string
									values?: [...string]
								}]
								matchLabels?: {
									[string]: string
								}
							}
							namespaces?: [...string]
							topologyKey!: string
						}
						weight!: int32
					}]
					requiredDuringSchedulingIgnoredDuringExecution?: [...{
						labelSelector?: {
							matchExpressions?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
							matchLabels?: {
								[string]: string
							}
						}
						matchLabelKeys?: [...string]
						mismatchLabelKeys?: [...string]
						namespaceSelector?: {
							matchExpressions?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
							matchLabels?: {
								[string]: string
							}
						}
						namespaces?: [...string]
						topologyKey!: string
					}]
				}
				podAntiAffinity?: {
					preferredDuringSchedulingIgnoredDuringExecution?: [...{
						podAffinityTerm!: {
							labelSelector?: {
								matchExpressions?: [...{
									key!:      string
									operator!: string
									values?: [...string]
								}]
								matchLabels?: {
									[string]: string
								}
							}
							matchLabelKeys?: [...string]
							mismatchLabelKeys?: [...string]
							namespaceSelector?: {
								matchExpressions?: [...{
									key!:      string
									operator!: string
									values?: [...string]
								}]
								matchLabels?: {
									[string]: string
								}
							}
							namespaces?: [...string]
							topologyKey!: string
						}
						weight!: int32
					}]
					requiredDuringSchedulingIgnoredDuringExecution?: [...{
						labelSelector?: {
							matchExpressions?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
							matchLabels?: {
								[string]: string
							}
						}
						matchLabelKeys?: [...string]
						mismatchLabelKeys?: [...string]
						namespaceSelector?: {
							matchExpressions?: [...{
								key!:      string
								operator!: string
								values?: [...string]
							}]
							matchLabels?: {
								[string]: string
							}
						}
						namespaces?: [...string]
						topologyKey!: string
					}]
				}
			}
			extraAnnotations?: {
				[string]: string
			}
			extraLabels?: {
				[string]: string
			}
			gracefulShutdown?: {
				enabled?:          bool
				sleepTimeSeconds?: int
			}
			imagePullSecrets?: [...{
				name?: string
			}]
			livenessProbe?: {
				exec?: {
					command?: [...string]
				}
				failureThreshold?: int32
				grpc?: {
					port!:    int32
					service?: string
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name!:  string
						value!: string
					}]
					path?: string
					port!: matchN(>=1, [int, string])
					scheme?: string
				}
				initialDelaySeconds?: int32
				periodSeconds?:       int32
				successThreshold?:    int32
				tcpSocket?: {
					host?: string
					port!: matchN(>=1, [int, string])
				}
				terminationGracePeriodSeconds?: int64
				timeoutSeconds?:                int32
			}
			nodeSelector?: {
				[string]: string
			}
			readinessProbe?: {
				exec?: {
					command?: [...string]
				}
				failureThreshold?: int32
				grpc?: {
					port!:    int32
					service?: string
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name!:  string
						value!: string
					}]
					path?: string
					port!: matchN(>=1, [int, string])
					scheme?: string
				}
				initialDelaySeconds?: int32
				periodSeconds?:       int32
				successThreshold?:    int32
				tcpSocket?: {
					host?: string
					port!: matchN(>=1, [int, string])
				}
				terminationGracePeriodSeconds?: int64
				timeoutSeconds?:                int32
			}
			securityContext?: {
				appArmorProfile?: {
					localhostProfile?: string
					type!:             string
				}
				fsGroup?:             int64
				fsGroupChangePolicy?: string
				runAsGroup?:          int64
				runAsNonRoot?:        bool
				runAsUser?:           int64
				seLinuxChangePolicy?: string
				seLinuxOptions?: {
					level?: string
					role?:  string
					type?:  string
					user?:  string
				}
				seccompProfile?: {
					localhostProfile?: string
					type!:             string
				}
				supplementalGroups?: [...int & int64]
				supplementalGroupsPolicy?: string
				sysctls?: [...{
					name!:  string
					value!: string
				}]
				windowsOptions?: {
					gmsaCredentialSpec?:     string
					gmsaCredentialSpecName?: string
					hostProcess?:            bool
					runAsUserName?:          string
				}
			}
			terminationGracePeriodSeconds?: int
			tolerations?: [...{
				effect?:            string
				key?:               string
				operator?:          string
				tolerationSeconds?: int64
				value?:             string
			}]
			topologySpreadConstraints?: [...{
				labelSelector?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
				matchLabelKeys?: [...string]
				maxSkew!:            int32
				minDomains?:         int32
				nodeAffinityPolicy?: string
				nodeTaintsPolicy?:   string
				topologyKey!:        string
				whenUnsatisfiable!:  string
			}]
		}
		sdsContainer?: {
			bootstrap?: {
				logLevel?: string
			}
			image?: {
				digest?:     string
				pullPolicy?: string
				registry?:   string
				repository?: string
				tag?:        string
			}
			resources?: {
				claims?: [...{
					name!:    string
					request?: string
				}]
				limits?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
				requests?: {
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				}
			}
			securityContext?: {
				allowPrivilegeEscalation?: bool
				appArmorProfile?: {
					localhostProfile?: string
					type!:             string
				}
				capabilities?: {
					add?: [...string]
					drop?: [...string]
				}
				privileged?:             bool
				procMount?:              string
				readOnlyRootFilesystem?: bool
				runAsGroup?:             int64
				runAsNonRoot?:           bool
				runAsUser?:              int64
				seLinuxOptions?: {
					level?: string
					role?:  string
					type?:  string
					user?:  string
				}
				seccompProfile?: {
					localhostProfile?: string
					type!:             string
				}
				windowsOptions?: {
					gmsaCredentialSpec?:     string
					gmsaCredentialSpecName?: string
					hostProcess?:            bool
					runAsUserName?:          string
				}
			}
		}
		service?: {
			clusterIP?:             string
			externalTrafficPolicy?: string
			extraAnnotations?: {
				[string]: string
			}
			extraLabels?: {
				[string]: string
			}
			ports?: [...{
				nodePort?: int
				port!:     int
			}]
			type?: "ClusterIP" | "NodePort" | "LoadBalancer" | "ExternalName"
		}
		serviceAccount?: {
			extraAnnotations?: {
				[string]: string
			}
			extraLabels?: {
				[string]: string
			}
		}
		stats?: {
			enableStatsRoute?:        bool
			enabled?:                 bool
			routePrefixRewrite?:      string
			statsRoutePrefixRewrite?: string
		}
	}
	selfManaged?: {
		...
	}
}
