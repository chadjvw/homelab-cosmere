// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/kgateway-dev/kgateway/raw/refs/heads/main/install/helm/kgateway-crds/templates/gateway.kgateway.dev_trafficpolicies.yaml

package v1alpha1

import (
	"strings"
	"list"
)

#TrafficPolicy: {
	apiVersion: "gateway.kgateway.dev/v1alpha1"
	kind:       "TrafficPolicy"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #TrafficPolicySpec
}
#TrafficPolicySpec: {
	ai?: {
		defaults?: [...{
			field!:    strings.MinRunes(1)
			override?: bool
			value!:    strings.MinRunes(1)
		}]
		promptEnrichment?: {
			append?: [...{
				content!: string
				role!:    string
			}]
			prepend?: [...{
				content!: string
				role!:    string
			}]
		}
		promptGuard?: {
			request?: {
				customResponse?: {
					message?:    string
					statusCode?: uint & >=200 & <=599
				}
				moderation?: {
					openAIModeration?: {
						authToken!: {
							inline?: string
							kind!:   "Inline" | "SecretRef" | "Passthrough"
							secretRef?: {
								name?: string
							}
						}
						model?: string
					}
				}
				regex?: {
					action?: string
					builtins?: [..."SSN" | "CREDIT_CARD" | "PHONE_NUMBER" | "EMAIL"]
					matches?: [...{
						name?:    string
						pattern?: string
					}]
				}
				webhook?: {
					forwardHeaders?: [...{
						name!: strings.MaxRunes(256) & strings.MinRunes(1) & {
							=~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"
						}
						type?:  "Exact" | "RegularExpression"
						value!: strings.MaxRunes(4096) & strings.MinRunes(1)
					}]
					host!: {
						host!: strings.MinRunes(1)
						port!: uint16 & >=1
					}
				}
			}
			response?: {
				regex?: {
					action?: string
					builtins?: [..."SSN" | "CREDIT_CARD" | "PHONE_NUMBER" | "EMAIL"]
					matches?: [...{
						name?:    string
						pattern?: string
					}]
				}
				webhook?: {
					forwardHeaders?: [...{
						name!: strings.MaxRunes(256) & strings.MinRunes(1) & {
							=~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"
						}
						type?:  "Exact" | "RegularExpression"
						value!: strings.MaxRunes(4096) & strings.MinRunes(1)
					}]
					host!: {
						host!: strings.MinRunes(1)
						port!: uint16 & >=1
					}
				}
			}
		}
		routeType?: "CHAT" | "CHAT_STREAMING"
	}
	autoHostRewrite?: bool
	buffer?: {
		disable?: {}
		maxRequestSize?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
	}
	cors?: {
		allowCredentials?: true
		allowHeaders?: list.MaxItems(64) & [...strings.MaxRunes(256) & strings.MinRunes(1) & =~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"]
		allowMethods?: list.MaxItems(9) & [..."GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH" | "*"]
		allowOrigins?: list.MaxItems(64) & [...strings.MaxRunes(253) & strings.MinRunes(1) & =~"^(([^:/?#]+):)(//([^/?#]*))([^?#]*)(\\?([^#]*))?(#(.*))?"]
		disable?: {}
		exposeHeaders?: list.MaxItems(64) & [...strings.MaxRunes(256) & strings.MinRunes(1) & =~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"]
		maxAge?: int32 & >=1
		...
	}
	csrf?: {
		additionalOrigins?: list.MaxItems(16) & [...{
			contains?:   string
			exact?:      string
			ignoreCase!: bool
			prefix?:     string
			safeRegex?:  string
			suffix?:     string
		}]
		percentageEnabled?:  uint & <=100
		percentageShadowed?: uint & <=100
	}
	extAuth?: {
		contextExtensions?: {
			[string]: string
		}
		disable?: {}
		extensionRef?: {
			name!: strings.MaxRunes(253) & strings.MinRunes(1)
			namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
				=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
			}
		}
		withRequestBody?: {
			allowPartialMessage?: bool
			maxRequestBytes!:     int32 & >=1
			packAsBytes?:         bool
		}
	}
	extProc?: {
		disable?: {}
		extensionRef?: {
			name!: strings.MaxRunes(253) & strings.MinRunes(1)
			namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
				=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
			}
		}
		processingMode?: {
			requestBodyMode?:     "NONE" | "STREAMED" | "BUFFERED" | "BUFFERED_PARTIAL" | "FULL_DUPLEX_STREAMED"
			requestHeaderMode?:   "DEFAULT" | "SEND" | "SKIP"
			requestTrailerMode?:  "DEFAULT" | "SEND" | "SKIP"
			responseBodyMode?:    "NONE" | "STREAMED" | "BUFFERED" | "BUFFERED_PARTIAL" | "FULL_DUPLEX_STREAMED"
			responseHeaderMode?:  "DEFAULT" | "SEND" | "SKIP"
			responseTrailerMode?: "DEFAULT" | "SEND" | "SKIP"
		}
	}
	headerModifiers?: {
		request?: {
			add?: list.MaxItems(16) & [...{
				name!: strings.MaxRunes(256) & strings.MinRunes(1) & {
					=~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"
				}
				value!: strings.MaxRunes(4096) & strings.MinRunes(1)
			}]
			remove?: list.MaxItems(16) & [...string]
			set?: list.MaxItems(16) & [...{
				name!: strings.MaxRunes(256) & strings.MinRunes(1) & {
					=~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"
				}
				value!: strings.MaxRunes(4096) & strings.MinRunes(1)
			}]
		}
		response?: {
			add?: list.MaxItems(16) & [...{
				name!: strings.MaxRunes(256) & strings.MinRunes(1) & {
					=~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"
				}
				value!: strings.MaxRunes(4096) & strings.MinRunes(1)
			}]
			remove?: list.MaxItems(16) & [...string]
			set?: list.MaxItems(16) & [...{
				name!: strings.MaxRunes(256) & strings.MinRunes(1) & {
					=~"^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$"
				}
				value!: strings.MaxRunes(4096) & strings.MinRunes(1)
			}]
		}
	}
	rateLimit?: {
		global?: {
			descriptors!: [...{
				entries!: [...{
					generic?: {
						key!:   strings.MinRunes(1)
						value!: strings.MinRunes(1)
					}
					header?: strings.MinRunes(1)
					type!:   "Generic" | "Header" | "RemoteAddress" | "Path"
				}] & [_, ...]
			}] & [_, ...]
			extensionRef!: {
				name!: strings.MaxRunes(253) & strings.MinRunes(1)
				namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
				}
			}
		}
		local?: {
			tokenBucket?: {
				fillInterval!:  string
				maxTokens!:     int32 & >=1
				tokensPerFill?: int32 & >=1
			}
		}
	}
	rbac?: {
		action?: "Allow" | "Deny"
		policy!: {
			matchExpressions?: [...string] & [_, ...]
		}
	}
	retry?: {
		attempts?:            int32 & >=0
		backoffBaseInterval?: string
		perTryTimeout?:       string
		retryOn?: [..."5xx" | "gateway-error" | "reset" | "reset-before-request" | "connect-failure" | "envoy-ratelimited" | "retriable-4xx" | "refused-stream" | "retriable-status-codes" | "http3-post-connect-failure" | "cancelled" | "deadline-exceeded" | "internal" | "resource-exhausted" | "unavailable"] & [_, ...]
		statusCodes?: [...int & <=599 & >=400] & [_, ...]
	}
	targetRefs?: list.MaxItems(16) & [...{
		group!: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
		kind!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}
		name!: strings.MaxRunes(253) & strings.MinRunes(1)
		sectionName?: strings.MaxRunes(253) & strings.MinRunes(1) & {
			=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
	}] & [_, ...]
	targetSelectors?: [...{
		group!: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
		kind!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}
		matchLabels!: {
			[string]: string
		}
		sectionName?: strings.MaxRunes(253) & strings.MinRunes(1) & {
			=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
	}]
	timeouts?: {
		request?:    string
		streamIdle?: string
	}
	transformation?: {
		request?: {
			add?: list.MaxItems(16) & [...{
				name!:  string
				value?: string
			}]
			body?: {
				parseAs!: "AsString" | "AsJson"
				value?:   string
			}
			remove?: list.MaxItems(16) & [...string]
			set?: list.MaxItems(16) & [...{
				name!:  string
				value?: string
			}]
		}
		response?: {
			add?: list.MaxItems(16) & [...{
				name!:  string
				value?: string
			}]
			body?: {
				parseAs!: "AsString" | "AsJson"
				value?:   string
			}
			remove?: list.MaxItems(16) & [...string]
			set?: list.MaxItems(16) & [...{
				name!:  string
				value?: string
			}]
		}
	}
}
