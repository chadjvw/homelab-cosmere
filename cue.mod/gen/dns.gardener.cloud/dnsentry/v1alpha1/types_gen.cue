// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f dns-controller.yaml

package v1alpha1

import (
	"strings"
	"list"
)

#DNSEntry: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "dns.gardener.cloud/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "DNSEntry"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #DNSEntrySpec
}
#DNSEntrySpec: {
	// lookup interval for CNAMEs that must be resolved to IP
	// addresses.
	// Only used if `resolveTargetsToAddresses` is set to true or
	// targets consists of multiple domain names.
	cnameLookupInterval?: uint & >=30 & <=8640000

	// full qualified domain name
	dnsName!: string

	// Deprecated: This field is no longer used and will be removed in
	// a future release.
	ownerId?: string

	// Deprecated: This field will be removed in a future release.
	// Until removed, it references a base entry used to inherit
	// attributes from.
	reference?: {
		// name of the referenced DNSEntry object
		name!: string

		// namespace of the referenced DNSEntry object
		namespace?: string
	}

	// enables translation of a target domain name in the resolved
	// IPv4 and IPv6 addresses.
	// If enabled, `A` and/or `AAAA` records are created instead of a
	// `CNAME` record.
	// If the target list contains multiple targets, it is enabled
	// implicitly.
	resolveTargetsToAddresses?: bool

	// optional routing policy
	routingPolicy?: {
		// Policy specific parameters
		parameters!: {
			[string]: string
		}

		// SetIdentifier is the identifier of the record set
		setIdentifier!: string

		// Policy is the policy type. Allowed values are provider
		// dependent, e.g. `weighted`
		type!: "weighted" | "latency" | "geolocation" | "ip-based" | "failover"
	}

	// target records (CNAME or A records), either text or targets
	// must be specified
	targets?: list.MaxItems(100) & [...strings.MinRunes(1)]

	// text records, either text or targets must be specified
	text?: list.MaxItems(100) & [...strings.MinRunes(1)]

	// time to live for records in external DNS system
	ttl?: uint & >=1 & <=8640000
}
