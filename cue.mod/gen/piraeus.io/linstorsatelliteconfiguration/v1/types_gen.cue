// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/piraeusdatastore/piraeus-operator/releases/download/v2.9.0/manifest.yaml

package v1

import "strings"

// LinstorSatelliteConfiguration is the Schema for the
// linstorsatelliteconfigurations API
#LinstorSatelliteConfiguration: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "piraeus.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "LinstorSatelliteConfiguration"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// LinstorSatelliteConfigurationSpec defines a partial, desired
	// state of a LinstorSatelliteSpec.
	//
	// All the LinstorSatelliteConfiguration resources with matching
	// NodeSelector will
	// be merged into a single LinstorSatelliteSpec.
	spec!: #LinstorSatelliteConfigurationSpec
}

// LinstorSatelliteConfigurationSpec defines a partial, desired
// state of a LinstorSatelliteSpec.
//
// All the LinstorSatelliteConfiguration resources with matching
// NodeSelector will
// be merged into a single LinstorSatelliteSpec.
#LinstorSatelliteConfigurationSpec: {
	// DeletionPolicy configures the way LinstorSatellite resources
	// are deleted.
	//
	// A LinstorSatellite may be deleted because:
	// * It no longer matches the affinity and node selector of the
	// LinstorCluster resource.
	// * The node it references has been removed from Kubernetes.
	// * It was manually deleted outside the Operator.
	//
	// A LinstorSatellite may store the last copy of a volume, in
	// which case it is not desirable to unconditionally remove
	// the satellite from the cluster. For this reason, the following
	// deletion policies exist:
	//
	// * DeletionPolicyEvacuate will start evacuation of the LINSTOR
	// Satellite and wait until it completes before removing the
	// LinstorSatellite object, comparable to the "linstor node
	// evacuate" command.
	// * DeletionPolicyRetain will retain the LINSTOR Satellite,
	// keeping it registered in LINSTOR, but removing associated
	// Kubernetes resources.
	// * DeletionPolicyDelete will remove the LINSTOR Satellite from
	// the LINSTOR Cluster without prior eviction, comparable to the
	// "linstor node lost" command.
	deletionPolicy?: "Evacuate" | "Retain" | "Delete"

	// InternalTLS configures secure communication for the LINSTOR
	// Satellite.
	//
	// If set, the control traffic between LINSTOR Controller and
	// Satellite will be encrypted using mTLS.
	internalTLS?: null | {
		// CAReference configures the CA certificate to use when
		// validating TLS certificates.
		// If not set, the TLS secret is expected to contain a "ca.crt"
		// containing the CA certificate.
		caReference?: {
			// Key to select in the resource.
			// Defaults to ca.crt if not specified.
			key?: string

			// Kind of the resource containing the CA Certificate, either a
			// ConfigMap or Secret.
			kind?: "ConfigMap" | "Secret"

			// Name of the resource containing the CA Certificate.
			name!: string

			// Optional specifies whether the resource and its key must exist.
			optional?: bool
		}

		// CertManager references a cert-manager Issuer or ClusterIssuer.
		// If set, a Certificate resource will be created, provisioning
		// the secret references in SecretName using the
		// issuer configured here.
		certManager?: {
			// Group of the resource being referred to.
			group?: string

			// Kind of the resource being referred to.
			kind?: string

			// Name of the resource being referred to.
			name!: string
		}

		// SecretName references a secret holding the TLS key and
		// certificates.
		secretName?: string

		// TLSHandshakeDaemon enables tlshd for establishing TLS sessions
		// for use by DRBD.
		//
		// If enabled, adds a new sidecar to the LINSTOR Satellite that
		// runs the tlshd handshake daemon.
		// The daemon uses the TLS certificate and key to establish secure
		// connections on behalf of DRBD.
		tlsHandshakeDaemon?: bool
	}

	// IPFamilies configures the IP Family (IPv4 or IPv6) to use to
	// connect to the LINSTOR Satellite.
	//
	// If set, the control traffic between LINSTOR Controller and
	// Satellite will use only the given IP Family.
	// If not set, the Operator will configure all families found in
	// the Satellites Pods' Status.
	ipFamilies?: [..."IPv4" | "IPv6"]
	nodeAffinity?: {
		// Required. A list of node selector terms. The terms are ORed.
		nodeSelectorTerms!: [...{
			// A list of node selector requirements by node's labels.
			matchExpressions?: [...{
				// The label key that the selector applies to.
				key!: string

				// Represents a key's relationship to a set of values.
				// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and
				// Lt.
				operator!: string

				// An array of string values. If the operator is In or NotIn,
				// the values array must be non-empty. If the operator is Exists
				// or DoesNotExist,
				// the values array must be empty. If the operator is Gt or Lt,
				// the values
				// array must have a single element, which will be interpreted as
				// an integer.
				// This array is replaced during a strategic merge patch.
				values?: [...string]
			}]

			// A list of node selector requirements by node's fields.
			matchFields?: [...{
				// The label key that the selector applies to.
				key!: string

				// Represents a key's relationship to a set of values.
				// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and
				// Lt.
				operator!: string

				// An array of string values. If the operator is In or NotIn,
				// the values array must be non-empty. If the operator is Exists
				// or DoesNotExist,
				// the values array must be empty. If the operator is Gt or Lt,
				// the values
				// array must have a single element, which will be interpreted as
				// an integer.
				// This array is replaced during a strategic merge patch.
				values?: [...string]
			}]
		}]
	}

	// NodeSelector selects which LinstorSatellite resources this spec
	// should be applied to.
	// See
	// https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	nodeSelector?: {
		[string]: string
	}

	// Patches is a list of kustomize patches to apply.
	//
	// See
	// https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/
	// for how to create patches.
	patches?: [...{
		// Options is a list of options for the patch
		options?: {
			[string]: bool
		}

		// Patch is the content of a patch.
		patch!: strings.MinRunes(1)

		// Target points to the resources that the patch is applied to
		target?: {
			// AnnotationSelector is a string that follows the label selection
			// expression
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
			// It matches against the resource annotations.
			annotationSelector?: string
			group?:              string
			kind?:               string

			// LabelSelector is a string that follows the label selection
			// expression
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
			// It matches against the resource labels.
			labelSelector?: string

			// Name of the resource.
			name?: string

			// Namespace the resource belongs to, if it can belong to a
			// namespace.
			namespace?: string
			version?:   string
		}
	}]

	// Template to apply to Satellite Pods.
	//
	// The template is applied as a patch to the default resource, so
	// it can be "sparse", not listing any
	// containers or volumes that should remain unchanged.
	// See
	// https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates
	podTemplate?: {
		...
	}

	// Properties is a list of properties to set on the node.
	properties?: [...{
		// ExpandFrom can reference multiple resource fields at once.
		// It either sets the property to an aggregate value based on
		// matched resource fields, or expands to multiple
		// properties.
		expandFrom?: {
			// Delimiter used to join multiple key and value pairs together.
			delimiter?: string

			// NameTemplate defines how the property key is expanded.
			// If set, the template is appended to the defined property name,
			// creating multiple properties instead of one
			// aggregate.
			// * $1 is replaced with the matched key.
			// * $2 is replaced with the matched value.
			nameTemplate?: string

			// Select a field of the node. Supports `metadata.name`,
			// `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`.
			nodeFieldRef!: strings.MinRunes(1)

			// ValueTemplate defines how the property value is expanded.
			// * $1 is replaced with the matched key.
			// * $2 is replaced with the matched value.
			valueTemplate?: string
		}

		// Name of the property to set.
		name!: strings.MinRunes(1)

		// Optional values are only set if they have a non-empty value
		optional?: bool

		// Value to set the property to.
		value?: string
		valueFrom?: {
			// Select a field of the node. Supports `metadata.name`,
			// `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`.
			nodeFieldRef!: strings.MinRunes(1)
		}
	}]

	// StoragePools is a list of storage pools to configure on the
	// node.
	storagePools?: [...{
		filePool?: {
			// Directory is the path to the host directory used to store
			// volume data.
			directory?: string
		}
		fileThinPool?: {
			// Directory is the path to the host directory used to store
			// volume data.
			directory?: string
		}
		lvmPool?: {
			volumeGroup?: string
		}

		// Configures a LVM Thin Pool as storage pool.
		lvmThinPool?: {
			// ThinPool is the name of the thinpool LV (without VG prefix).
			thinPool?:    string
			volumeGroup?: string
		}

		// Name of the storage pool in linstor.
		name!: strings.MinRunes(3)

		// Properties to set on the storage pool.
		properties?: [...{
			// ExpandFrom can reference multiple resource fields at once.
			// It either sets the property to an aggregate value based on
			// matched resource fields, or expands to multiple
			// properties.
			expandFrom?: {
				// Delimiter used to join multiple key and value pairs together.
				delimiter?: string

				// NameTemplate defines how the property key is expanded.
				// If set, the template is appended to the defined property name,
				// creating multiple properties instead of one
				// aggregate.
				// * $1 is replaced with the matched key.
				// * $2 is replaced with the matched value.
				nameTemplate?: string

				// Select a field of the node. Supports `metadata.name`,
				// `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`.
				nodeFieldRef!: strings.MinRunes(1)

				// ValueTemplate defines how the property value is expanded.
				// * $1 is replaced with the matched key.
				// * $2 is replaced with the matched value.
				valueTemplate?: string
			}

			// Name of the property to set.
			name!: strings.MinRunes(1)

			// Optional values are only set if they have a non-empty value
			optional?: bool

			// Value to set the property to.
			value?: string
			valueFrom?: {
				// Select a field of the node. Supports `metadata.name`,
				// `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`.
				nodeFieldRef!: strings.MinRunes(1)
			}
		}]
		source?: {
			// HostDevices is a list of device paths used to configure the
			// given pool.
			hostDevices?: [...string] & [_, ...]
		}
		zfsPool?: {
			// ZPool is the name of the ZFS zpool.
			zPool?: string
		}
		zfsThinPool?: {
			// ZPool is the name of the ZFS zpool.
			zPool?: string
		}
	}]
}
