// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/piraeusdatastore/piraeus-operator/releases/download/v2.9.0/manifest.yaml

package v1

import "strings"

// LinstorNodeConnection is the Schema for the
// linstornodeconnections API
#LinstorNodeConnection: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "piraeus.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "LinstorNodeConnection"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// LinstorNodeConnectionSpec defines the desired state of
	// LinstorNodeConnection
	spec!: #LinstorNodeConnectionSpec
}

// LinstorNodeConnectionSpec defines the desired state of
// LinstorNodeConnection
#LinstorNodeConnectionSpec: {
	// Paths configure the network path used when connecting two
	// nodes.
	paths?: [...{
		// Interface to use on both nodes.
		interface!: string

		// Name of the path.
		name!: string
	}]

	// Properties to apply for the node connection.
	//
	// Use to create default settings for DRBD that should apply to
	// all resources connections between a set of
	// cluster nodes.
	properties?: [...{
		// Name of the property to set.
		name!: strings.MinRunes(1)

		// Value to set the property to.
		value?: string
	}]

	// Selector selects which pair of Satellites the connection should
	// apply to.
	// If not given, the connection will be applied to all
	// connections.
	selector?: [...{
		// MatchLabels is a list of match expressions that the node pairs
		// must meet.
		matchLabels!: [...{
			// Key is the name of a node label.
			key!: strings.MinRunes(1)

			// Op to apply to the label.
			// Exists (default) checks for the presence of the label on both
			// nodes in the pair.
			// DoesNotExist checks that the label is not present on either
			// node in the pair.
			// In checks for the presence of the label value given by Values
			// on both nodes in the pair.
			// NotIn checks that both nodes in the pair do not have any of the
			// label values given by Values.
			// Same checks that the label value is equal in the node pair.
			// NotSame checks that the label value is not equal in the node
			// pair.
			op?: "Exists" | "DoesNotExist" | "In" | "NotIn" | "Same" | "NotSame"

			// Values to match on, using the provided Op.
			values?: [...string]
		}]
	}]
}
