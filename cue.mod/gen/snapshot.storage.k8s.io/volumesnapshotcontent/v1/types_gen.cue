// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml

package v1

import "strings"

// VolumeSnapshotContent represents the actual "on-disk" snapshot
// object in the
// underlying storage system
#VolumeSnapshotContent: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "snapshot.storage.k8s.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "VolumeSnapshotContent"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// spec defines properties of a VolumeSnapshotContent created by
	// the underlying storage system.
	// Required.
	spec!: #VolumeSnapshotContentSpec
}

// spec defines properties of a VolumeSnapshotContent created by
// the underlying storage system.
// Required.
#VolumeSnapshotContentSpec: {
	// deletionPolicy determines whether this VolumeSnapshotContent
	// and its physical snapshot on
	// the underlying storage system should be deleted when its bound
	// VolumeSnapshot is deleted.
	// Supported values are "Retain" and "Delete".
	// "Retain" means that the VolumeSnapshotContent and its physical
	// snapshot on underlying storage system are kept.
	// "Delete" means that the VolumeSnapshotContent and its physical
	// snapshot on underlying storage system are deleted.
	// For dynamically provisioned snapshots, this field will
	// automatically be filled in by the
	// CSI snapshotter sidecar with the "DeletionPolicy" field defined
	// in the corresponding
	// VolumeSnapshotClass.
	// For pre-existing snapshots, users MUST specify this field when
	// creating the
	// VolumeSnapshotContent object.
	// Required.
	deletionPolicy!: "Delete" | "Retain"

	// driver is the name of the CSI driver used to create the
	// physical snapshot on
	// the underlying storage system.
	// This MUST be the same as the name returned by the CSI
	// GetPluginName() call for
	// that driver.
	// Required.
	driver!: string

	// source specifies whether the snapshot is (or should be)
	// dynamically provisioned
	// or already exists, and just requires a Kubernetes object
	// representation.
	// This field is immutable after creation.
	// Required.
	source!: {
		// snapshotHandle specifies the CSI "snapshot_id" of a
		// pre-existing snapshot on
		// the underlying storage system for which a Kubernetes object
		// representation
		// was (or should be) created.
		// This field is immutable.
		snapshotHandle?: string

		// volumeHandle specifies the CSI "volume_id" of the volume from
		// which a snapshot
		// should be dynamically taken from.
		// This field is immutable.
		volumeHandle?: string
	}

	// SourceVolumeMode is the mode of the volume whose snapshot is
	// taken.
	// Can be either “Filesystem” or “Block”.
	// If not specified, it indicates the source volume's mode is
	// unknown.
	// This field is immutable.
	// This field is an alpha field.
	sourceVolumeMode?: string

	// name of the VolumeSnapshotClass from which this snapshot was
	// (or will be)
	// created.
	// Note that after provisioning, the VolumeSnapshotClass may be
	// deleted or
	// recreated with different set of values, and as such, should not
	// be referenced
	// post-snapshot creation.
	volumeSnapshotClassName?: string

	// volumeSnapshotRef specifies the VolumeSnapshot object to which
	// this
	// VolumeSnapshotContent object is bound.
	// VolumeSnapshot.Spec.VolumeSnapshotContentName field must
	// reference to
	// this VolumeSnapshotContent's name for the bidirectional binding
	// to be valid.
	// For a pre-existing VolumeSnapshotContent object, name and
	// namespace of the
	// VolumeSnapshot object MUST be provided for binding to happen.
	// This field is immutable after creation.
	// Required.
	volumeSnapshotRef!: {
		// API version of the referent.
		apiVersion?: string

		// If referring to a piece of an object instead of an entire
		// object, this string
		// should contain a valid JSON/Go field access statement, such as
		// desiredState.manifest.containers[2].
		// For example, if the object reference is to a container within a
		// pod, this would take on a value like:
		// "spec.containers{name}" (where "name" refers to the name of the
		// container that triggered
		// the event) or if no container name is specified
		// "spec.containers[2]" (container with
		// index 2 in this pod). This syntax is chosen only to have some
		// well-defined way of
		// referencing a part of an object.
		// TODO: this design is not final and this field is subject to
		// change in the future.
		fieldPath?: string

		// Kind of the referent.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		kind?: string

		// Name of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
		name?: string

		// Namespace of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
		namespace?: string

		// Specific resourceVersion to which this reference is made, if
		// any.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
		resourceVersion?: string

		// UID of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
		uid?: string
	}
}
