// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://raw.githubusercontent.com/external-secrets/external-secrets/v0.20.1/deploy/crds/bundle.yaml

package v1alpha1

import "strings"

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
#GCRAccessToken: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "generators.external-secrets.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "GCRAccessToken"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #GCRAccessTokenSpec
}
#GCRAccessTokenSpec: {
	// Auth defines the means for authenticating with GCP
	auth!: {
		secretRef?: {
			// The SecretAccessKey is used for authentication
			secretAccessKeySecretRef?: {
				// A key in the referenced Secret.
				// Some instances of this field may be defaulted, in others it may
				// be required.
				key?: strings.MaxRunes(253) & strings.MinRunes(1) & {
					=~"^[-._a-zA-Z0-9]+$"
				}

				// The name of the Secret resource being referred to.
				name?: strings.MaxRunes(253) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
				}

				// The namespace of the Secret resource being referred to.
				// Ignored if referent is not cluster-scoped, otherwise defaults
				// to the namespace of the referent.
				namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
				}
			}
		}
		workloadIdentity?: {
			clusterLocation!:  string
			clusterName!:      string
			clusterProjectID?: string

			// A reference to a ServiceAccount resource.
			serviceAccountRef!: {
				// Audience specifies the `aud` claim for the service account
				// token
				// If the service account uses a well-known annotation for e.g.
				// IRSA or GCP Workload Identity
				// then this audiences will be appended to the list
				audiences?: [...string]

				// The name of the ServiceAccount resource being referred to.
				name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
				}

				// Namespace of the resource being referred to.
				// Ignored if referent is not cluster-scoped, otherwise defaults
				// to the namespace of the referent.
				namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
				}
			}
		}

		// GCPWorkloadIdentityFederation holds the configurations required
		// for generating federated access tokens.
		workloadIdentityFederation?: {
			// audience is the Secure Token Service (STS) audience which
			// contains the resource name for the workload identity pool and
			// the provider identifier in that pool.
			// If specified, Audience found in the external account credential
			// config will be overridden with the configured value.
			// audience must be provided when serviceAccountRef or
			// awsSecurityCredentials is configured.
			audience?: string

			// awsSecurityCredentials is for configuring AWS region and
			// credentials to use for obtaining the access token,
			// when using the AWS metadata server is not an option.
			awsSecurityCredentials?: {
				// awsCredentialsSecretRef is the reference to the secret which
				// holds the AWS credentials.
				// Secret should be created with below names for keys
				// - aws_access_key_id: Access Key ID, which is the unique
				// identifier for the AWS account or the IAM user.
				// - aws_secret_access_key: Secret Access Key, which is used to
				// authenticate requests made to AWS services.
				// - aws_session_token: Session Token, is the short-lived token to
				// authenticate requests made to AWS services.
				awsCredentialsSecretRef!: {
					// name of the secret.
					name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
						=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
					}

					// namespace in which the secret exists. If empty, secret will
					// looked up in local namespace.
					namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
						=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
					}
				}

				// region is for configuring the AWS region to be used.
				region!: strings.MaxRunes(50) & strings.MinRunes(1) & {
					=~"^[a-z0-9-]+$"
				}
			}

			// credConfig holds the configmap reference containing the GCP
			// external account credential configuration in JSON format and
			// the key name containing the json data.
			// For using Kubernetes cluster as the identity provider, use
			// serviceAccountRef instead. Operators mounted serviceaccount
			// token cannot be used as the token source, instead
			// serviceAccountRef must be used by providing operators service
			// account details.
			credConfig?: {
				// key name holding the external account credential config.
				key!: strings.MaxRunes(253) & strings.MinRunes(1) & {
					=~"^[-._a-zA-Z0-9]+$"
				}

				// name of the configmap.
				name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
				}

				// namespace in which the configmap exists. If empty, configmap
				// will looked up in local namespace.
				namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
				}
			}

			// externalTokenEndpoint is the endpoint explicitly set up to
			// provide tokens, which will be matched against the
			// credential_source.url in the provided credConfig. This field is
			// merely to double-check the external token source
			// URL is having the expected value.
			externalTokenEndpoint?: string

			// serviceAccountRef is the reference to the kubernetes
			// ServiceAccount to be used for obtaining the tokens,
			// when Kubernetes is configured as provider in workload identity
			// pool.
			serviceAccountRef?: {
				// Audience specifies the `aud` claim for the service account
				// token
				// If the service account uses a well-known annotation for e.g.
				// IRSA or GCP Workload Identity
				// then this audiences will be appended to the list
				audiences?: [...string]

				// The name of the ServiceAccount resource being referred to.
				name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
				}

				// Namespace of the resource being referred to.
				// Ignored if referent is not cluster-scoped, otherwise defaults
				// to the namespace of the referent.
				namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
					=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
				}
			}
		}
	}

	// ProjectID defines which project to use to authenticate with
	projectID!: string
}
